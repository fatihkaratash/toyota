# version: '3.8' # Bu satırı kaldırabilirsiniz

services:
  # --- Altyapı Servisleri ---
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks: # EKLENDİ (Eskisinde yoksa)
      - toyota-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
      # - "9101:9101" # JMX için, gerekmiyorsa kapalı kalsın
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092 # Host'tan erişim için localhost
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true" # Ensure this line is present and set to true

      # KAFKA_JMX_PORT: 9101
      # KAFKA_JMX_HOSTNAME: kafka
    networks: # EKLENDİ (Eskisinde yoksa)
      - toyota-network

  redis:
    image: redis:7.2.3-alpine
    container_name: redis
    hostname: redis # EKLENDİ (İyi bir pratik)
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks: # EKLENDİ (Eskisinde yoksa)
      - toyota-network

  postgres: # YENİ EKLENDİ
    image: postgres:15-alpine
    container_name: postgres
    hostname: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pgadmin
      POSTGRES_DB: toyota_rates
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-init-scripts:/docker-entrypoint-initdb.d # Tablo oluşturma scriptleri için
      - postgres-data:/var/lib/postgresql/data
    networks:
      - toyota-network

  opensearch: # YENİ EKLENDİ
    image: opensearchproject/opensearch:2.11.0
    container_name: opensearch
    hostname: opensearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" # Başlangıç için, ihtiyaca göre artırın
      - plugins.security.disabled=${DISABLE_OPENSEARCH_SECURITY:-true}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    ports:
      - "9200:9200"
      - "9600:9600"
    networks:
      - toyota-network

  opensearch-dashboards: # YENİ EKLENDİ
    image: opensearchproject/opensearch-dashboards:2.11.0
    container_name: opensearch-dashboards
    hostname: opensearch-dashboards
    ports:
      - "5601:5601"
    environment:
      OPENSEARCH_HOSTS: '["http://opensearch:9200"]'
      DISABLE_SECURITY_DASHBOARDS_PLUGIN: ${DISABLE_OPENSEARCH_SECURITY:-true}
    depends_on:
      - opensearch
    networks:
      - toyota-network

  # --- Uygulama Servisleri ---
  rest-rate-provider:
    build:
      context: ./data-providers/rest-rate-provider
      dockerfile: Dockerfile
    container_name: rest-rate-provider
    hostname: rest-rate-provider # EKLENDİ
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8080
    volumes:
      - ./logs/rest-provider:/app/logs
    networks: # EKLENDİ (Eskisinde yoksa)
      - toyota-network

  tcp-rate-provider:
    build:
      context: ./data-providers/tcp-rate-provider
      dockerfile: Dockerfile
    container_name: tcp-rate-provider
    hostname: tcp-rate-provider # EKLENDİ
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      SERVER_PORT: 8081
    volumes:
      - ./logs/tcp-provider:/app/logs
    networks: # EKLENDİ (Eskisinde yoksa)
      - toyota-network

  main-application:
    build:
      context: ./main-application
      dockerfile: Dockerfile
    container_name: main-application
    hostname: main-application # EKLENDİ
    restart: unless-stopped
    ports:
      - "8082:8082" # Eskiden 8083:8082 idi, 8082:8082 yaptım
    depends_on:
      - kafka
      - redis
      - rest-rate-provider # Bu bağımlılıklar başlangıç sırasını etkiler
      - tcp-rate-provider
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8082
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      # Aşağıdakileri main-app'in subscribers.json'ında ${...} ile kullanmak için:
      PROVIDER_REST_BASE_URL: http://rest-rate-provider:8080/api # Önceki gibi /v1/rates eklenebilir
      PROVIDER_TCP_HOST: tcp-rate-provider
      PROVIDER_TCP_PORT: 8081
    volumes:
      - ./logs/main-application:/app/logs
    networks: # EKLENDİ (Eskisinde yoksa)
      - toyota-network

  kafka-consumer: # YENİ EKLENDİ
    build:
      context: ./kafka-consumer
      dockerfile: Dockerfile
    container_name: kafka-consumer
    hostname: kafka-consumer
    restart: unless-stopped
    depends_on: # Bu servislerin başlamasını bekler (tam hazır olmasını garanti etmez)
      - kafka
      - postgres
      - opensearch # Eğer OpenSearch'e yazacaksa
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8084 # Eğer bir API sunuyorsa (genellikle sunmaz)
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/toyota_rates
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: pgadmin
      SPRING_ELASTICSEARCH_URIS: http://opensearch:9200 # Veya spring.opensearch.uris
      OPENSEARCH_USERNAME: ${OPENSEARCH_USERNAME:-}
      OPENSEARCH_PASSWORD: ${OPENSEARCH_PASSWORD:-}
      DISABLE_OPENSEARCH_SECURITY: ${DISABLE_OPENSEARCH_SECURITY:-true}
      # Kafka Consumer için topic ve group id
      APP_KAFKA_TOPIC_SIMPLE_RATES: ${APP_KAFKA_TOPIC_SIMPLE_RATES:-financial-simple-rates}
      SPRING_KAFKA_CONSUMER_GROUP_ID: ${SPRING_KAFKA_CONSUMER_GROUP_ID:-simple-rate-persister-group}
    volumes:
      - ./logs/kafka-consumer:/app/logs
    networks:
      - toyota-network

# Ortak Network (Eğer eskiden yoksa bu gerekli)
networks:
  toyota-network:
    driver: bridge

# Kalıcı Veri Alanları
volumes:
  redis-data:
  postgres-data: # YENİ EKLENDİ
  opensearch-data: # YENİ EKLENDİ