version: '3.8'

services:
  # Kafka altyapısı
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost

  # Redis önbellek servisi
  redis:
    image: redis:7.2.3-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes

  # REST veri sağlayıcı
  rest-rate-provider:
    build:
      context: ./data-providers/rest-rate-provider
      dockerfile: Dockerfile
    container_name: rest-rate-provider
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
      - ./logs/rest-provider:/app/logs # Maps container's /app/logs to host's ./logs/rest-provider

  # TCP veri sağlayıcı
  tcp-rate-provider:
    build:
      context: ./data-providers/tcp-rate-provider
      dockerfile: Dockerfile
    container_name: tcp-rate-provider
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      SERVER_PORT: 8081
    volumes:
      - ./logs/tcp-provider:/app/logs # Maps container's /app/logs to host's ./logs/tcp-provider

  # Ana uygulama (koordinatör)
  main-application:
    build:
      context: ./main-application
      dockerfile: Dockerfile
    container_name: main-application
    restart: unless-stopped
    ports:
      - "8083:8082"
    depends_on:
      - kafka
      - redis
      - rest-rate-provider
      - tcp-rate-provider
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8082
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      APP_PROVIDER_REST_DEFAULT_HOST: rest-rate-provider
      APP_PROVIDER_TCP_DEFAULT_HOST: tcp-rate-provider
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
      - ./logs/main-application:/app/logs # Maps container's /app/logs to host's ./logs/main-application

  # Kafka tüketici uygulaması (opsiyonel)
# kafka-consumer:
#   build:
#     context: ./kafka-consumer
#     dockerfile: Dockerfile
#   container_name: kafka-consumer
#   depends_on:
#     - kafka
#     - main-application
#   environment:
#     SPRING_PROFILES_ACTIVE: docker
#     SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
#   restart: on-failure

volumes:
  redis-data: